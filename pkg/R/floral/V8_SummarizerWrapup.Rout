
R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(diversitree) #obvious
Loading required package: deSolve

Attaching package: ‘deSolve’

The following object is masked from ‘package:graphics’:

    matplot

Loading required package: ape
Loading required package: subplex
Loading required package: Rcpp
> library(sfsmisc) #for counting in binary
> library(partitions)
> library(gmp) #for dealing with big integers

Attaching package: ‘gmp’

The following objects are masked from ‘package:sfsmisc’:

    factorize, is.whole

The following objects are masked from ‘package:base’:

    %*%, apply, crossprod, matrix, tcrossprod

> setwd("/Users/bomeara/Documents/MyDocuments/Active/OMearaLabR/pkg/R/floral")
> source("V6_UtilityFns.R")
> library(doMC)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> library(foreach)
> S=6
> maxStringLength<-nchar(2^S)
> registerDoMC(3) #This has a lot of I/O and memory, so make it run on fewer than the available number of processsors
> 
> setwd("/Users/bomeara/Documents/MyDocuments/Active/FloralAssembly/PerformanceCheck_May2015")
> 
> scale.factor.best = 1.758664 #from /Users/bomeara/Documents/MyDocuments/Active/FloralAssembly/SimsMay2013FINAL/full_bd_20000000_rescale_ntax.old.scale_11043
> files <- rev(system(paste("ls -1 | grep Checkpoint | grep RSave | grep -v T | grep ", scale.factor.best, sep=""), intern=TRUE))
> 
> 
> data.conversions <- gsub("x", "0", c("0x00xx", "0x01xx", "0x10xx", "0x11xx", "1x00xx", "1x01xx", "1x10xx", "1x11xx"))
> 
> focal.labels <- c("0x11xx", "xx1xxx", "1xxxxx", "xxx1xx", "0x1xxx", "0xx1xx", "xx11xx", "1x11xx", "0x01xx", "0x10xx")
> 
> T.vector <- sequence(5)
> D.vector <- sequence(6)
> 
> load("~/Dropbox/SummaryRaw.RSave")
> for (charStateI in 1:((2^S))) { 
+ 	binaryStateIVector<-digitsBase(charStateI-1,ndigits=S)[,1]
+ 	iLabelShort<-sprintf(paste("%0",maxStringLength,"d",sep=""),charStateI)
+ 	iLabelLong<-vectorToString(binaryStateIVector)
+ 	names(summary.dataframe)[which(names(summary.dataframe) == paste("lambda",iLabelShort,sep="",collapse=""))]<-paste("lambda",iLabelLong,sep="",collapse="")
+ 	names(summary.dataframe)[which(names(summary.dataframe) == paste("mu",iLabelShort,sep="",collapse=""))]<-paste("mu",iLabelLong,sep="",collapse="")
+ 			print(paste("changing names for ",iLabelLong))
+ 	for (charStateJ in 1:((2^S))) { 
+ 		binaryStateJVector<-digitsBase(charStateJ-1,ndigits=S)[,1]
+ 		jLabelShort<-sprintf(paste("%0",maxStringLength,"d",sep=""),charStateJ)
+ 		jLabelLong<-vectorToString(binaryStateJVector)
+ 		numberMismatches=vectorMismatch(binaryStateIVector,binaryStateJVector) #so we have two vectors, say 00101 and 00110 (though as length 5 vectors). Doing v1==v2 leads to T T T F F. T=1 for R and F=0, so 1-(v1==v2) = c(1-1,1-1,1-1,1-0,1-0), sum of which is the number of mismatches
+ 		if (numberMismatches==1) {
+ 			names(summary.dataframe)[which(names(summary.dataframe) == paste("q",iLabelShort,jLabelShort,sep="",collapse=""))]<-paste("q",iLabelLong,"_",jLabelLong,sep="",collapse="")			
+ 		}
+ 		else {
+ 			names(summary.dataframe)[which(names(summary.dataframe) == paste("q",iLabelShort,jLabelShort,sep="",collapse=""))]<-paste("q",iLabelLong,"_",jLabelLong,"_disallowed",sep="",collapse="")			
+ 		}
+ 	}
+ }
[1] "changing names for  000000"
[1] "changing names for  000001"
[1] "changing names for  000010"
[1] "changing names for  000011"
[1] "changing names for  000100"
[1] "changing names for  000101"
[1] "changing names for  000110"
[1] "changing names for  000111"
[1] "changing names for  001000"
[1] "changing names for  001001"
[1] "changing names for  001010"
[1] "changing names for  001011"
[1] "changing names for  001100"
[1] "changing names for  001101"
[1] "changing names for  001110"
[1] "changing names for  001111"
[1] "changing names for  010000"
[1] "changing names for  010001"
[1] "changing names for  010010"
[1] "changing names for  010011"
[1] "changing names for  010100"
[1] "changing names for  010101"
[1] "changing names for  010110"
[1] "changing names for  010111"
[1] "changing names for  011000"
[1] "changing names for  011001"
[1] "changing names for  011010"
[1] "changing names for  011011"
[1] "changing names for  011100"
[1] "changing names for  011101"
[1] "changing names for  011110"
[1] "changing names for  011111"
[1] "changing names for  100000"
[1] "changing names for  100001"
[1] "changing names for  100010"
[1] "changing names for  100011"
[1] "changing names for  100100"
[1] "changing names for  100101"
[1] "changing names for  100110"
[1] "changing names for  100111"
[1] "changing names for  101000"
[1] "changing names for  101001"
[1] "changing names for  101010"
[1] "changing names for  101011"
[1] "changing names for  101100"
[1] "changing names for  101101"
[1] "changing names for  101110"
[1] "changing names for  101111"
[1] "changing names for  110000"
[1] "changing names for  110001"
[1] "changing names for  110010"
[1] "changing names for  110011"
[1] "changing names for  110100"
[1] "changing names for  110101"
[1] "changing names for  110110"
[1] "changing names for  110111"
[1] "changing names for  111000"
[1] "changing names for  111001"
[1] "changing names for  111010"
[1] "changing names for  111011"
[1] "changing names for  111100"
[1] "changing names for  111101"
[1] "changing names for  111110"
[1] "changing names for  111111"
> 
> save(summary.dataframe, file="~/Dropbox/SummaryPretty.RSave")
> write.csv(summary.dataframe, file="~/Dropbox/SummaryPretty.csv")
> 
> proc.time()
   user  system elapsed 
 29.568   0.585  30.231 
